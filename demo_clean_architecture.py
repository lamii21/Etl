#!/usr/bin/env python3
"""
D√©monstration de la nouvelle architecture propre
Montre les capacit√©s et l'organisation du code refactoris√©
"""

import sys
from pathlib import Path
import pandas as pd
import tempfile

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent))

from app.core.models.file_info import FileInfo, UploadResult
from app.core.models.sheet_info import SheetInfo, SheetAnalysisResult
from app.core.services.file_service import FileService
from app.core.services.sheet_service import SheetService
from app.utils.logger import get_structured_logger, configure_global_logging
from app.utils.config import BASE_DIR, UPLOADS_DIR


def demo_logging_system():
    """D√©monstration du syst√®me de logging"""
    print("üìù D√âMONSTRATION DU SYST√àME DE LOGGING")
    print("-" * 50)
    
    # Configurer le logging global
    configure_global_logging()
    
    # Cr√©er un logger structur√©
    logger = get_structured_logger("demo", {"component": "architecture_demo"})
    
    print("‚úÖ Logger structur√© cr√©√© avec contexte")
    
    # D√©montrer les diff√©rents niveaux
    logger.info("D√©marrage de la d√©monstration", demo_id="arch_001")
    logger.warning("Ceci est un avertissement", level="demo")
    
    # D√©montrer le contexte additionnel
    upload_logger = logger.with_context(operation="file_upload", user="demo_user")
    upload_logger.info("Upload simul√© d√©marr√©")
    upload_logger.info("Upload simul√© termin√©", status="success")
    
    print("‚úÖ Logs structur√©s avec contexte g√©n√©r√©s")
    print()


def demo_models():
    """D√©monstration des mod√®les de donn√©es"""
    print("üìä D√âMONSTRATION DES MOD√àLES DE DONN√âES")
    print("-" * 50)
    
    # D√©monstration FileInfo
    file_info = FileInfo(
        file_id="demo123",
        original_name="demo_file.xlsx",
        stored_path=Path("demo_file.xlsx"),
        file_size=2048000,  # 2MB
        upload_timestamp=pd.Timestamp.now(),
        file_type="excel",
        is_excel=True
    )
    
    print(f"üìÑ FileInfo cr√©√©:")
    print(f"   ‚Ä¢ ID: {file_info.file_id}")
    print(f"   ‚Ä¢ Nom: {file_info.original_name}")
    print(f"   ‚Ä¢ Taille: {file_info.size_mb:.2f} MB")
    print(f"   ‚Ä¢ Extension: {file_info.extension}")
    print(f"   ‚Ä¢ Type Excel: {file_info.is_excel}")
    
    # D√©monstration SheetInfo
    sheet_info = SheetInfo(
        name="Main_Data",
        rows=150,
        columns=8,
        column_names=["PN", "Description", "Quantity", "Price", "Status", "Project", "Notes", "Date"],
        pn_columns=["PN"],
        data_density=92.5,
        is_data_sheet=True,
        sample_data=[
            {"PN": "ABC123", "Description": "Component A", "Quantity": "10"},
            {"PN": "DEF456", "Description": "Component B", "Quantity": "20"}
        ],
        recommended=True
    )
    
    print(f"\nüìã SheetInfo cr√©√©:")
    print(f"   ‚Ä¢ Nom: {sheet_info.name}")
    print(f"   ‚Ä¢ Dimensions: {sheet_info.rows} √ó {sheet_info.columns}")
    print(f"   ‚Ä¢ Colonnes PN: {sheet_info.pn_columns}")
    print(f"   ‚Ä¢ Densit√©: {sheet_info.data_density}%")
    print(f"   ‚Ä¢ Score qualit√©: {sheet_info.quality_score:.1f}/100")
    print(f"   ‚Ä¢ Recommand√©e: {sheet_info.recommended}")
    
    # D√©monstration de s√©rialisation
    sheet_dict = sheet_info.to_dict()
    print(f"\nüîÑ S√©rialisation JSON:")
    print(f"   ‚Ä¢ Cl√©s disponibles: {list(sheet_dict.keys())}")
    print(f"   ‚Ä¢ Pr√™t pour API: ‚úÖ")
    print()


def demo_file_service():
    """D√©monstration du service de fichiers"""
    print("üìÅ D√âMONSTRATION DU SERVICE DE FICHIERS")
    print("-" * 50)
    
    # Cr√©er le service
    file_service = FileService()
    print("‚úÖ FileService initialis√©")
    
    # Cr√©er un fichier Excel de d√©monstration
    demo_data = pd.DataFrame({
        "PN": ["ABC123", "DEF456", "GHI789"],
        "Description": ["Component A", "Component B", "Component C"],
        "Quantity": [10, 20, 30],
        "Project": ["V710_AWD_PP_YOTK"] * 3
    })
    
    # Sauvegarder temporairement
    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
        demo_data.to_excel(tmp_file.name, index=False)
        
        # Lire le contenu
        with open(tmp_file.name, 'rb') as f:
            file_content = f.read()
        
        tmp_path = Path(tmp_file.name)
    
    try:
        # D√©monstration de validation
        validation = file_service.validate_file(tmp_path, "demo.xlsx")
        print(f"üìã Validation du fichier:")
        print(f"   ‚Ä¢ Valide: {validation.is_valid}")
        print(f"   ‚Ä¢ Type: {validation.file_type}")
        print(f"   ‚Ä¢ Probl√®mes: {len(validation.issues)}")
        print(f"   ‚Ä¢ Avertissements: {len(validation.warnings)}")
        
        # D√©monstration d'upload
        upload_result = file_service.save_uploaded_file(file_content, "demo.xlsx")
        print(f"\nüì§ Upload simul√©:")
        print(f"   ‚Ä¢ Succ√®s: {upload_result.success}")
        
        if upload_result.success:
            file_info = upload_result.file_info
            print(f"   ‚Ä¢ File ID: {file_info.file_id}")
            print(f"   ‚Ä¢ Chemin stock√©: {file_info.stored_path.name}")
            print(f"   ‚Ä¢ Taille: {file_info.size_mb:.2f} MB")
            
            # D√©monstration de recherche
            found_file = file_service.find_file_by_id(file_info.file_id)
            print(f"\nüîç Recherche par ID:")
            print(f"   ‚Ä¢ Trouv√©: {found_file is not None}")
            if found_file:
                print(f"   ‚Ä¢ Nom original: {found_file.original_name}")
            
            # Nettoyer le fichier upload√©
            file_info.stored_path.unlink(missing_ok=True)
        
    finally:
        # Nettoyer le fichier temporaire
        tmp_path.unlink(missing_ok=True)
    
    print()


def demo_sheet_service():
    """D√©monstration du service d'analyse des feuilles"""
    print("üìä D√âMONSTRATION DU SERVICE D'ANALYSE DES FEUILLES")
    print("-" * 50)
    
    # Cr√©er le service
    sheet_service = SheetService()
    print("‚úÖ SheetService initialis√©")
    
    # Cr√©er un fichier Excel multi-feuilles
    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
        tmp_path = Path(tmp_file.name)
        
        with pd.ExcelWriter(tmp_path, engine='openpyxl') as writer:
            # Feuille principale avec PN
            main_data = pd.DataFrame({
                "PN": ["ABC123", "DEF456", "GHI789", "JKL012"],
                "Description": ["Component A", "Component B", "Component C", "Component D"],
                "Quantity": [10, 20, 30, 40],
                "V710_AWD_PP_YOTK": ["Active", "Active", "Inactive", "Active"]
            })
            main_data.to_excel(writer, sheet_name="Main_Data", index=False)
            
            # Feuille de r√©sum√© sans PN
            summary_data = pd.DataFrame({
                "Category": ["Electronics", "Mechanical"],
                "Count": [25, 15],
                "Status": ["OK", "Review"]
            })
            summary_data.to_excel(writer, sheet_name="Summary", index=False)
            
            # Feuille alternative avec PN diff√©rent
            alt_data = pd.DataFrame({
                "YAZAKI_PN": ["MNO345", "PQR678"],
                "Part_Name": ["Alt Component 1", "Alt Component 2"],
                "Stock": [5, 15]
            })
            alt_data.to_excel(writer, sheet_name="Alternative", index=False)
    
    try:
        # D√©monstration d'analyse
        analysis = sheet_service.analyze_excel_sheets(tmp_path)
        
        print(f"üìã Analyse des feuilles:")
        print(f"   ‚Ä¢ Total feuilles: {analysis.total_sheets}")
        print(f"   ‚Ä¢ Feuilles avec donn√©es: {len(analysis.data_sheets)}")
        print(f"   ‚Ä¢ Feuilles avec PN: {len(analysis.sheets_with_pn)}")
        print(f"   ‚Ä¢ Feuille recommand√©e: {analysis.recommended_sheet}")
        
        print(f"\nüìä D√©tail des feuilles:")
        for sheet in analysis.sheets:
            pn_info = f" (PN: {', '.join(sheet.pn_columns)})" if sheet.pn_columns else " (No PN)"
            quality_info = f" [Score: {sheet.quality_score:.1f}]"
            recommended_mark = " ‚≠ê" if sheet.recommended else ""
            
            print(f"   ‚Ä¢ {sheet.name}: {sheet.rows} rows, {sheet.data_density}% density{pn_info}{quality_info}{recommended_mark}")
        
        # D√©monstration de s√©lection
        file_id = "demo_sheet_123"
        selection_result = sheet_service.set_working_sheet(file_id, analysis.recommended_sheet)
        
        print(f"\nüéØ S√©lection de feuille:")
        print(f"   ‚Ä¢ Succ√®s: {selection_result.success}")
        print(f"   ‚Ä¢ Message: {selection_result.message}")
        
        if selection_result.success:
            print(f"   ‚Ä¢ Feuille s√©lectionn√©e: {selection_result.sheet_name}")
            print(f"   ‚Ä¢ Statistiques: {selection_result.sheet_stats['rows']} rows, {selection_result.sheet_stats['columns']} cols")
        
    finally:
        # Nettoyer
        tmp_path.unlink(missing_ok=True)
    
    print()


def demo_architecture_benefits():
    """D√©monstration des b√©n√©fices de l'architecture"""
    print("üéØ B√âN√âFICES DE LA NOUVELLE ARCHITECTURE")
    print("-" * 50)
    
    benefits = [
        ("üèóÔ∏è Modularit√©", "Code organis√© en modules sp√©cialis√©s"),
        ("üîß Maintenabilit√©", "Ajout/modification de fonctionnalit√©s facilit√©"),
        ("üß™ Testabilit√©", "Services testables unitairement"),
        ("üìù Tra√ßabilit√©", "Logging structur√© pour debugging"),
        ("üîí Robustesse", "Validation des donn√©es √† tous les niveaux"),
        ("üìä √âvolutivit√©", "Architecture pr√™te pour nouvelles fonctionnalit√©s"),
        ("üë• Collaboration", "Structure claire pour √©quipe de d√©veloppement"),
        ("üöÄ Performance", "Services optimis√©s et sp√©cialis√©s")
    ]
    
    for benefit, description in benefits:
        print(f"   {benefit} {description}")
    
    print()


def main():
    """Fonction principale de d√©monstration"""
    print("üéâ D√âMONSTRATION DE LA NOUVELLE ARCHITECTURE YAZAKI")
    print("=" * 70)
    print("Architecture Clean - Code Organis√© et Professionnel")
    print("=" * 70)
    print()
    
    # D√©monstrations
    demo_logging_system()
    demo_models()
    demo_file_service()
    demo_sheet_service()
    demo_architecture_benefits()
    
    print("=" * 70)
    print("‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS !")
    print("=" * 70)
    print()
    print("üéØ R√âSUM√â DE LA TRANSFORMATION:")
    print("   ‚Ä¢ Code refactoris√© selon Clean Architecture")
    print("   ‚Ä¢ Services m√©tier sp√©cialis√©s et testables")
    print("   ‚Ä¢ Mod√®les de donn√©es structur√©s et valid√©s")
    print("   ‚Ä¢ Logging professionnel avec contexte")
    print("   ‚Ä¢ Architecture modulaire et √©volutive")
    print()
    print("üöÄ PR√äT POUR:")
    print("   ‚Ä¢ D√©veloppement d'√©quipe")
    print("   ‚Ä¢ Maintenance √† long terme")
    print("   ‚Ä¢ Ajout de nouvelles fonctionnalit√©s")
    print("   ‚Ä¢ D√©ploiement en production")
    print()
    print("üéâ Le syst√®me YAZAKI est maintenant professionnel et maintenable !")


if __name__ == "__main__":
    main()
